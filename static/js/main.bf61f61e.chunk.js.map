{"version":3,"sources":["Search.tsx","gql.service.ts","App.tsx","hooks.ts","reportWebVitals.ts","index.tsx"],"names":["Search","searchString","onSearchStringChanged","matchedArtists","onArtistSelected","useState","open","setOpen","Autocomplete","fullWidth","id","onOpen","onClose","onChange","e","value","mbid","isOptionEqualToValue","option","getOptionLabel","name","options","renderInput","params","TextField","label","target","InputProps","endAdornment","Fragment","requestQuery","query","a","axios","post","data","searchArtists","artistName","artists","search","nodes","findAlbums","artistMBID","releaseGroups","browse","App","setSearchString","debouncedSearchString","timeout","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebouce","setMatchedArtists","loadMatchingArtists","selectedArtistMBID","setSelectedArtistMBID","albums","setAlbums","loadAlbums","imagesForImageGrid","map","album","releaseGroup","theAudioDB","backImage","frontImage","thumbnailFromAudioDB","fanArt","albumCovers","find","url","thumbnailFromFanArt","thumnailURLForAlbum","console","log","Container","maxWidth","Grid","container","justifyContent","sx","marginTop","sm","images","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf61f61e.chunk.js","sourcesContent":["import { ReactJSXElement } from \"@emotion/react/types/jsx-namespace\";\nimport { Input, MenuItem, Select, TextField, Autocomplete, CircularProgress } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { SearchedArtist } from \"./types\";\n\ninterface SearchProps {\n    searchString: string,\n    onSearchStringChanged: (searchString: string) => void\n    matchedArtists: {\n        mbid: string\n        name: string\n    }[]\n    onArtistSelected: (selectedArtistMBID: string | null) => void\n}\nexport const Search: React.FC<SearchProps> = ({ searchString, onSearchStringChanged, matchedArtists, onArtistSelected }) => {\n    const [open, setOpen] = useState(false);\n    return (\n        <Autocomplete\n            fullWidth\n            id=\"search\"\n            open={open}\n            onOpen={() => {\n                setOpen(true);\n            }}\n            onClose={() => {\n                setOpen(false);\n            }}\n            onChange={(e, value) => {\n                onArtistSelected(value?.mbid || null);\n            }}\n            isOptionEqualToValue={(option, value) => option.mbid === value.mbid}\n            getOptionLabel={(option) => option.name}\n            options={matchedArtists}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Search for artists\"\n                    value={searchString}\n                    onChange={(e) => onSearchStringChanged(e.target.value)}\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                />\n            )}\n        />\n    )\n}","import {\n\tBrowseAlbumsResponse,\n\tSearchArtistResponse,\n\tSearchedArtist,\n} from './types';\nimport axios from 'axios';\nimport { release } from 'os';\n\nasync function requestQuery<T>(query: string): Promise<T> {\n\tconst { data } = await axios.post<T>('https://graphbrainz.herokuapp.com', {\n\t\tquery,\n\t});\n\treturn data;\n}\n\nexport async function searchArtists(\n\tartistName: string\n): Promise<SearchedArtist[]> {\n\ttry {\n\t\tconst { data } = await requestQuery<SearchArtistResponse>(`{\n            search {\n                artists(query: \"${artistName}\", first: 1) {\n                    nodes {\n                        name\n                        mbid\n                        fanArt {\n                            thumbnails {\n                                url\n                            }\n                        }\n                    }\n                }\n            }\n        }`);\n\t\tconst artists = data.search?.artists?.nodes || [];\n\t\treturn artists;\n\t} catch (error) {\n\t\treturn [];\n\t}\n}\n\nexport async function findAlbums(artistMBID: string) {\n\ttry {\n\t\tconst { data } = await requestQuery<BrowseAlbumsResponse>(`{\n            browse {\n                releaseGroups(artist: \"${artistMBID}\") {\n                    nodes {\n                        mbid\n                        title\n                        fanArt {\n                            albumCovers {\n                                url\n                            }\n                        }\n                        theAudioDB {\n                            frontImage\n                            backImage\n                            spineImage\n                            discImage\n                        }\n                    }\n                }\n            }\n        }`);\n\t\tconst releaseGroups = data.browse?.releaseGroups.nodes || [];\n\t\treturn releaseGroups;\n\t} catch (error) {\n\t\treturn [];\n\t}\n}\n","\nimport { Container, Grid } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { Search } from './Search';\n//@ts-ignore\nimport FbImageLibrary from 'react-fb-image-grid';\nimport { BrowseAlbumsResponse, ReleaseGroup, SearchedArtist } from \"./types\";\nimport { findAlbums, searchArtists } from \"./gql.service\";\nimport { useDebouce } from \"./hooks\";\n\nfunction thumbnailFromAudioDB(releaseGroup: ReleaseGroup) {\n\tconst { theAudioDB } = releaseGroup;\n\treturn theAudioDB?.backImage\n\t\t|| theAudioDB?.frontImage;\n}\n\nfunction thumbnailFromFanArt(releaseGroup: ReleaseGroup) {\n\tconst { fanArt } = releaseGroup;\n\treturn (fanArt?.albumCovers || []).find((album) => album.url)?.url;\n}\n\nfunction thumnailURLForAlbum(album: ReleaseGroup) {\n\treturn thumbnailFromAudioDB(album)\n\t\t|| thumbnailFromFanArt(album)\n\t\t|| 'picture';\n}\n\nfunction App() {\n\tconst [searchString, setSearchString] = useState('');\n\tconst debouncedSearchString = useDebouce(searchString, 500);\n\n\tconst [matchedArtists, setMatchedArtists] = useState<SearchedArtist[]>([]);\n\tuseEffect(() => {\n\t\tasync function loadMatchingArtists() {\n\t\t\tsetMatchedArtists(await searchArtists(searchString));\n\t\t}\n\n\t\tif (debouncedSearchString !== '') {\n\t\t\tloadMatchingArtists();\n\t\t} else {\n\t\t\tsetMatchedArtists([]);\n\t\t}\n\t}, [debouncedSearchString]);\n\n\tconst [selectedArtistMBID, setSelectedArtistMBID] = useState<string | null>(null);\n\tconst [albums, setAlbums] = useState<ReleaseGroup[]>([]);\n\tuseEffect(() => {\n\t\tasync function loadAlbums(mbid: string) {\n\t\t\tsetAlbums(await findAlbums(mbid))\n\t\t}\n\n\t\tif (selectedArtistMBID) {\n\t\t\tloadAlbums(selectedArtistMBID);\n\t\t} else {\n\t\t\tsetAlbums([]);\n\t\t}\n\t}, [selectedArtistMBID]);\n\n\tconst imagesForImageGrid = albums.map((album) => thumnailURLForAlbum(album));\n\tconsole.log(imagesForImageGrid);\n\n\treturn (\n\t\t<Container maxWidth='lg' >\n\t\t\t<Grid container justifyContent='center' sx={{ marginTop: '100px' }}>\n\t\t\t\t<Grid sm={12}>\n\t\t\t\t\t<Search\n\t\t\t\t\t\tmatchedArtists={matchedArtists}\n\t\t\t\t\t\tsearchString={searchString}\n\t\t\t\t\t\tonSearchStringChanged={setSearchString}\n\t\t\t\t\t\tonArtistSelected={(mbid) => setSelectedArtistMBID(mbid)}\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid sm={12}>\n\t\t\t\t\t<FbImageLibrary images={imagesForImageGrid} />\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport function useDebouce<T>(value: T, timeout: number): T {\n\tconst [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n\tuseEffect(() => {\n\t\tconst handler = setTimeout(() => setDebouncedValue(value), timeout);\n\t\treturn () => {\n\t\t\tclearTimeout(handler);\n\t\t};\n\t}, [value, timeout]);\n\n\treturn debouncedValue;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}